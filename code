# ------ Global Variables -----

# game board
board = ["-","-","-",
         "-","-","-",
         "-","-","-" ]

game_still_going = True

# who won or tie?
winner = None

#Whos turn is it
current_player = "X"

# -----Functions ---------

def play_game():

  # Display initial board 
  display_board()
 
  # while the game is still going 
  while game_still_going:
    
    handle_turn(current_player)

     # flip to the other player
    check_if_game_over()

   
    flip_player()

# game has ended
  if winner == "X" or winner == "O":
    print (winner + " won.")
  elif winner == None: 
    print ("Tie.")


# Display board 
def display_board():
  print("\n")
  print(board[0] + " | " + board [1] + " | " + board [2])
  print(board[3] + " | " + board [4] + " | " + board [5])
  print(board[6] + " | " + board [7] + " | " + board [8])
  print("\n")




  

# Handle a single turn of an arbitrary player
def handle_turn(player): 

  print(player + "'s turn.")
  position = input("Choose a position from 1-9: ")

  valid = False
  while not valid: 
    
    while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
      position = input("Choose a position from 1-9: ")

 # position is a string so we want to convert it to an integer
    position = int(position) - 1 

    if board[position] == "-": 
      valid = True
    else:
      print("You cant go there. Go again")
 # to make sure that we go to 8 and not 9
  board[position] = player
  display_board()

def check_if_game_over():
  check_for_winner()
  check_if_tie()

def check_for_winner():

  # set of global variables
  global winner 
  # check rows
  row_winner = check_rows()
  # check columns
  column_winner = check_columns()
  # check diagonals
  diagonal_winner = check_diagonals()
  if row_winner:
    #there was a winner
    winner = row_winner
  elif column_winner: 
    #there was a winner
    winner = column_winner
  elif diagonal_winner:
    #there was a winner
    winner =diagonal_winner
  else:
    #there was no winner
    winner = None
  return

def check_rows():
  # Set of global variables 
  global game_still_going
  row_1 = board[0] == board [1] == board [2] != "-"
  row_2 = board[3] == board [4] == board [5] != "-"
  row_3 = board[6] == board [7] == board [8] != "-"
  #see 36 min clever programmer
  # if any row does have a match, flag that there is a win
  if row_1 or row_2 or row_3:
    game_still_going = False
    #return the winner (x or o)
  if row_1: 
    return board[0] 
  elif row_2: 
    return board[3]
  elif row_3: 
    return board[6]
  return

def check_columns():
  #Set of global variables 
  global game_still_going
  columns_1 = board[0] == board [3] == board [6] != "-"
  columns_2 = board[1] == board [4] == board [7] != "-"
  columns_3 = board[2] == board [5] == board [8] != "-"
  
  if columns_1 or columns_2 or columns_3:
    game_still_going = False
    #return the winner (x or o)
  if columns_1: 
    return board[0] 
  elif columns_2: 
    return board[1]
  elif columns_3: 
    return board[2]
  return

def check_diagonals(): 
  # Set of global variables 
  global game_still_going
  #check if any of the diagonals have all the same value (and is not empty)
  diagonal_1 = board[0] == board [4] == board [8] != "-"
  diagonal_2 = board[2] == board [4] == board [6] != "-"

  if diagonal_1 or diagonal_2:
    game_still_going = False
    #return the winner (x or o)
  if diagonal_1: 
    return board[0] 
  elif diagonal_2: 
    return board[2]
  return

def check_if_tie():
  if "-" not in board:
    game_still_going = False
  return

def flip_player():
  global current_player
  if current_player == "X":
    current_player = "O"
  elif current_player == "O":
    current_player = "X"
  return

  
play_game()
